package com.mini_project_event_management.event_management.company.service;
// Generated by CodiumAI

import com.mini_project_event_management.event_management.company.dto.RegisterCompanyRequestDto;
import com.mini_project_event_management.event_management.company.dto.RegisterCompanyResponseDto;
import com.mini_project_event_management.event_management.company.entity.Company;
import com.mini_project_event_management.event_management.company.repository.CompanyRepository;
import com.mini_project_event_management.event_management.company.service.impl.CompanyServiceImpl;

import com.mini_project_event_management.event_management.coupon.service.CouponService;
import com.mini_project_event_management.event_management.point.service.PointService;
import com.mini_project_event_management.event_management.referralCode.service.ReferralCodeService;
import org.junit.Test;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.time.Instant;
import java.util.Optional;

import static org.hamcrest.Matchers.any;
import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class RegisterTest {


    // Successfully registers a company with valid data
    @Test
    public void test_registers_company_with_valid_data() {
        CompanyRepository companyRepository = mock(CompanyRepository.class);
        PasswordEncoder passwordEncoder = mock(PasswordEncoder.class);
        ReferralCodeService referralCodeService = mock(ReferralCodeService.class);
        CouponService couponService = mock(CouponService.class);
        PointService pointService = mock(PointService.class);

        CompanyServiceImpl companyService = new CompanyServiceImpl(
            companyRepository, passwordEncoder, referralCodeService, couponService, pointService
        );

        RegisterCompanyRequestDto registerDto = new RegisterCompanyRequestDto();
        registerDto.setName("Test Company");
        registerDto.setEmail("test@example.com");
        registerDto.setPassword("password");
        registerDto.setPhoneNumber("1234567890");
        registerDto.setAddress("123 Test St");
        registerDto.setCity("Test City");
        registerDto.setWebsiteUrl("http://test.com");
        registerDto.setReferralCode("");
        Instant now = Instant.now();

        Company company = registerDto.toEntity();
        company.setSlug("Test-Company");
        company.setProfileUrl("");

        when(companyRepository.save(Mockito.any(Company.class))).thenReturn(company);
        when(passwordEncoder.encode(anyString())).thenReturn("encodedPassword");
        when(companyRepository.findById(company.getId())).thenReturn(Optional.of(company));

        RegisterCompanyResponseDto response = companyService.register(registerDto);

        assertNotNull(response);
        assertEquals("Test Company", response.getName());
        assertEquals("test@example.com", response.getEmail());
    }

    // Handles empty referral code gracefully
    @Test
    public void test_handles_empty_referral_code_gracefully() {
        CompanyRepository companyRepository = mock(CompanyRepository.class);
        PasswordEncoder passwordEncoder = mock(PasswordEncoder.class);
        ReferralCodeService referralCodeService = mock(ReferralCodeService.class);
        CouponService couponService = mock(CouponService.class);
        PointService pointService = mock(PointService.class);

        CompanyServiceImpl companyService = new CompanyServiceImpl(
            companyRepository, passwordEncoder, referralCodeService, couponService, pointService
        );

        RegisterCompanyRequestDto registerDto = new RegisterCompanyRequestDto();
        registerDto.setName("Test Company");
        registerDto.setEmail("test@example.com");
        registerDto.setPassword("password");
        registerDto.setPhoneNumber("1234567890");
        registerDto.setAddress("123 Test St");
        registerDto.setCity("Test City");
        registerDto.setWebsiteUrl("http://test.com");
        registerDto.setReferralCode("");

        Company company = registerDto.toEntity();
        when(passwordEncoder.encode(anyString())).thenReturn("encodedPassword");
        when(companyRepository.save(ArgumentMatchers.any(Company.class))).thenReturn(company);

        RegisterCompanyResponseDto response = companyService.register(registerDto);

        assertNotNull(response);
        assertEquals("Test Company", response.getName());
        assertEquals("test@example.com", response.getEmail());
    }

}